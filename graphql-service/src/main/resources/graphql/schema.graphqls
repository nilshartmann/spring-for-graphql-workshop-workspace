scalar DateTime
@specifiedBy(url:
"https://scalars.graphql.org/andimarek/date-time.html"
)

# Eine eigene Direktive, mit der man an einem Feld angeben kann,
# welche Rolle für den Zugriff erforderlich ist.
# Wenn die entsprechende Rolle nicht vorhanden ist, wird null zurückgeliefert
# Dieses Verhalten ist in AuthorizationDirectiveWiring implementiert
#   Im Schema exemplarisch beim Publisher-Feld hinzugefügt (nur ADMINs dürfen
#   den Publisher einer Story sehen)
directive @auth(role: String!) on FIELD_DEFINITION

interface Node {
    id: ID!
}
enum MediaType {
    image,
    video,
    audio,
}

type MediaMetadata {
    dimensions: String
    duration: Int
    codec: String
}

type Media {
    id: ID!
    url: String!
    type: MediaType!
    metadata: MediaMetadata
}

enum ContactType { phone, email }

type Contact {
    type: ContactType
    value: String!
}

type Publisher implements Node{
    id: ID!
    name: String!
    contact: Contact!
}

type Story implements Node {
    id: ID!
    title: String!
    body: String!
    excerpt(maxLength: Int! = 20): String!
    media: [Media!]
    date: DateTime!

    # Nullable, weil zur Laufzeit evtl.
    # nicht ermittelbar
    # Darf nur von Benutzern mit ROLE_ADMIN ausgeführt werden
    #  ansonsten wird null zurückgeliefert
    #  s. Klasse AuthorizationDirectiveWiring
    publisher: Publisher @auth(role: "ROLE_ADMIN")

#    addresse: String!

    "Liefert den `PublicationState` zurück"
    state: PublicationState!

    """
    Liefert die **Kommentare** zurück

    - oder _leere_ Liste
    """
    comments: [Comment!]!

    # todo umsetzen!

}

enum PublicationState {
    draft, in_review, published
}

type Comment implements Node {
    id: ID!
    text: String!
    rating: Int!
}


"""
Das ist der Einstiegspunkt!
"""
type Query {
    # S:1
    # C:1
    # P:1
    node(id: ID!): Node

    story(
        """Die Id der Story"""
        storyId: ID!): Story

    stories: [Story!]!

#    stories(page: Int!, size: Int!): StoryList!
}
# https://relay.dev/graphql/connections.htm
#type StoryConnection {
#    storyCount: Int!
#
#    page: Int!
#    hasNextPage: Boolean!
#
##    stories: [Story!]!
#
#    nodes: [StoryNode!]!
#
#}

#type StoryNode {
#    cursor: ID!
#    story: Story!
#}

input CreateCommentInput {
    storyId: ID!,
    text: String!,
    rating: Int!
}

input AddCommentInput {
    storyId: ID!,
    text: String!,
    rating: Int!
}

#type AddCommentPayload {
#    newComment: Comment
#    createdAt: String
#
#    errorMessage: String
#}

type AddCommentSuccess {
    newComment: Comment!
}

#interface Error {
#    msg: String!
#}


type AddCommentError {
    msg: String!

#    code: String!
}

#type StoryNotFoundError implements Error{
#    msg: String!
#
#    storyId: ID!
#}


union AddCommentPayload = AddCommentSuccess | AddCommentError

type Mutation {
    createComment(input: CreateCommentInput!): Comment! @deprecated(reason: "Schlechte Signatur!")
    addComment(input: AddCommentInput!): AddCommentPayload!
}